diff --git a/data.c b/data.c
index b4eb02e..64ccc73 100644
--- a/data.c
+++ b/data.c
@@ -30,12 +30,12 @@ We allocate space and export a symbol to be used as the Class for the on-stack a
 We keep these in a separate file so that we can include the runtime code in test subprojects but not include the data so that compiled code that sees the data in libSystem doesn't get confused by a second copy.  Somehow these don't get unified in a common block.
 **********************/
 
-void * _NSConcreteStackBlock[32] = { 0 };
-void * _NSConcreteMallocBlock[32] = { 0 };
-void * _NSConcreteAutoBlock[32] = { 0 };
-void * _NSConcreteFinalizingBlock[32] = { 0 };
-void * _NSConcreteGlobalBlock[32] = { 0 };
-void * _NSConcreteWeakBlockVariable[32] = { 0 };
+void * __attribute__((weak)) _NSConcreteStackBlock[32] = { 0 };
+void * __attribute__((weak)) _NSConcreteMallocBlock[32] = { 0 };
+void * __attribute__((weak)) _NSConcreteAutoBlock[32] = { 0 };
+void * __attribute__((weak)) _NSConcreteFinalizingBlock[32] = { 0 };
+void * __attribute__((weak)) _NSConcreteGlobalBlock[32] = { 0 };
+void * __attribute__((weak)) _NSConcreteWeakBlockVariable[32] = { 0 };
 
 void _Block_copy_error(void) {
 }
diff --git a/runtime.c b/runtime.c
index a059c22..ab4e43f 100644
--- a/runtime.c
+++ b/runtime.c
@@ -450,13 +450,13 @@ static void _Block_byref_release(const void *arg) {
 #pragma mark SPI/API
 #endif /* if 0 */
 
-void *_Block_copy(const void *arg) {
+void * __attribute__((weak)) _Block_copy(const void *arg) {
     return _Block_copy_internal(arg, WANTS_ONE);
 }
 
 
 // API entry point to release a copied Block
-void _Block_release(void *arg) {
+void __attribute__((weak)) _Block_release(void *arg) {
     struct Block_layout *aBlock = (struct Block_layout *)arg;
     int32_t newCount;
     if (!aBlock) return;
@@ -510,7 +510,7 @@ void *_Block_copy_collectable(const void *aBlock) {
 
 
 // SPI
-unsigned long int Block_size(void *arg) {
+unsigned long int __attribute__((weak)) Block_size(void *arg) {
     return ((struct Block_layout *)arg)->descriptor->size;
 }
 
@@ -557,7 +557,7 @@ The implementation of the two routines would be improved by switch statements en
  * When Blocks or Block_byrefs hold objects then their copy routine helpers use this entry point
  * to do the assignment.
  */
-void _Block_object_assign(void *destAddr, const void *object, const int flags) {
+void __attribute__((weak)) _Block_object_assign(void *destAddr, const void *object, const int flags) {
     //printf("_Block_object_assign(*%p, %p, %x)\n", destAddr, object, flags);
     if ((flags & BLOCK_BYREF_CALLER) == BLOCK_BYREF_CALLER) {
         if ((flags & BLOCK_FIELD_IS_WEAK) == BLOCK_FIELD_IS_WEAK) {
@@ -590,7 +590,7 @@ void _Block_object_assign(void *destAddr, const void *object, const int flags) {
 // When Blocks or Block_byrefs hold objects their destroy helper routines call this entry point
 // to help dispose of the contents
 // Used initially only for __attribute__((NSObject)) marked pointers.
-void _Block_object_dispose(const void *object, const int flags) {
+void __attribute__((weak)) _Block_object_dispose(const void *object, const int flags) {
     //printf("_Block_object_dispose(%p, %x)\n", object, flags);
     if (flags & BLOCK_FIELD_IS_BYREF)  {
         // get rid of the __block data structure held in a Block
@@ -617,7 +617,7 @@ void _Block_object_dispose(const void *object, const int flags) {
 #endif /* if 0 */
 
 
-const char *_Block_dump(const void *block) {
+const char * __attribute__((weak)) _Block_dump(const void *block) {
     struct Block_layout *closure = (struct Block_layout *)block;
     static char buffer[512];
     char *cp = buffer;
@@ -684,7 +684,7 @@ const char *_Block_dump(const void *block) {
 }
 
 
-const char *_Block_byref_dump(struct Block_byref *src) {
+const char * __attribute__((weak)) _Block_byref_dump(struct Block_byref *src) {
     static char buffer[256];
     char *cp = buffer;
     cp += sprintf(cp, "byref data block %p contents:\n", (void *)src);
